

    ;;; ACE-OCI CAPABILITY RULES ;;;

    (defrule MANIFEST::ACE-OCI-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-OCI) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::ACE-OCI-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::ACE-OCI-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-OCI) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI0) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol volcanic ash") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI1) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI2) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol mass mixing ratio") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI3) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Soil moisture at surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI4) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI5) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI6) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI7) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI8) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea-ice cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI9) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Earth surface albedo") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI10) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Snow cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI11) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-OCI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-OCI12) (Instrument ACE-OCI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  ACE-OCI0  ACE-OCI1  ACE-OCI2  ACE-OCI3  ACE-OCI4  ACE-OCI5  ACE-OCI6  ACE-OCI7  ACE-OCI8  ACE-OCI9  ACE-OCI10  ACE-OCI11  ACE-OCI12  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  ACE-OCI0  ACE-OCI1  ACE-OCI2  ACE-OCI3  ACE-OCI4  ACE-OCI5  ACE-OCI6  ACE-OCI7  ACE-OCI8  ACE-OCI9  ACE-OCI10  ACE-OCI11  ACE-OCI12 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-OCI-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; ACE-POL CAPABILITY RULES ;;;

    (defrule MANIFEST::ACE-POL-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-POL) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::ACE-POL-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::ACE-POL-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-POL) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL0) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud drop effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL1) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol volcanic ash") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL2) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL3) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol mass mixing ratio") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL4) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Soil moisture at surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL5) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Ocean chlorophyll concentration") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL6) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL7) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL8) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL9) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol column burden") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL10) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL11) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Earth surface albedo") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL12) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea-ice cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL13) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Snow cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL14) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL15) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-POL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-POL16) (Instrument ACE-POL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  ACE-POL0  ACE-POL1  ACE-POL2  ACE-POL3  ACE-POL4  ACE-POL5  ACE-POL6  ACE-POL7  ACE-POL8  ACE-POL9  ACE-POL10  ACE-POL11  ACE-POL12  ACE-POL13  ACE-POL14  ACE-POL15  ACE-POL16  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  ACE-POL0  ACE-POL1  ACE-POL2  ACE-POL3  ACE-POL4  ACE-POL5  ACE-POL6  ACE-POL7  ACE-POL8  ACE-POL9  ACE-POL10  ACE-POL11  ACE-POL12  ACE-POL13  ACE-POL14  ACE-POL15  ACE-POL16 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-POL-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; EARTHCARE-MSI CAPABILITY RULES ;;;

    (defrule MANIFEST::EARTHCARE-MSI-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-MSI) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::EARTHCARE-MSI-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::EARTHCARE-MSI-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-MSI) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI0) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI1) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI2) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI3) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI4) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea surface temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI5) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Snow cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-MSI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-MSI6) (Instrument EARTHCARE-MSI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  EARTHCARE-MSI0  EARTHCARE-MSI1  EARTHCARE-MSI2  EARTHCARE-MSI3  EARTHCARE-MSI4  EARTHCARE-MSI5  EARTHCARE-MSI6  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  EARTHCARE-MSI0  EARTHCARE-MSI1  EARTHCARE-MSI2  EARTHCARE-MSI3  EARTHCARE-MSI4  EARTHCARE-MSI5  EARTHCARE-MSI6 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-MSI-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; EARTHCARE-CPR CAPABILITY RULES ;;;

    (defrule MANIFEST::EARTHCARE-CPR-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-CPR) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::EARTHCARE-CPR-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::EARTHCARE-CPR-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-CPR) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR0) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Precipitation") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR1) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR2) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Precipitation intensity at surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR3) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Accumulated precipitation") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR4) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud drop effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR5) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR6) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud base height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR7) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud liquid water") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-CPR8) (Instrument EARTHCARE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  EARTHCARE-CPR0  EARTHCARE-CPR1  EARTHCARE-CPR2  EARTHCARE-CPR3  EARTHCARE-CPR4  EARTHCARE-CPR5  EARTHCARE-CPR6  EARTHCARE-CPR7  EARTHCARE-CPR8  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  EARTHCARE-CPR0  EARTHCARE-CPR1  EARTHCARE-CPR2  EARTHCARE-CPR3  EARTHCARE-CPR4  EARTHCARE-CPR5  EARTHCARE-CPR6  EARTHCARE-CPR7  EARTHCARE-CPR8 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-CPR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; ICI CAPABILITY RULES ;;;

    (defrule MANIFEST::ICI-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ICI) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::ICI-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::ICI-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ICI) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ICI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ICI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ICI0) (Instrument ICI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ICI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Specific humidity") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ICI) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ICI1) (Instrument ICI) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ICI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  ICI0  ICI1  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ICI-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  ICI0  ICI1 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ICI-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ICI-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; ACE-CPR CAPABILITY RULES ;;;

    (defrule MANIFEST::ACE-CPR-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-CPR) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::ACE-CPR-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::ACE-CPR-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-CPR) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR0) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Precipitation") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR1) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR2) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Precipitation intensity at surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR3) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Accumulated precipitation") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR4) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud drop effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR5) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR6) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud base height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR7) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud liquid water") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Low-1km-10km) (Vertical-Spatial-Resolution Medium-200m-2km) (Temporal-resolution Medium-1day-3days) (Accuracy High)  (taken-by ACE-CPR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-CPR8) (Instrument ACE-CPR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  ACE-CPR0  ACE-CPR1  ACE-CPR2  ACE-CPR3  ACE-CPR4  ACE-CPR5  ACE-CPR6  ACE-CPR7  ACE-CPR8  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  ACE-CPR0  ACE-CPR1  ACE-CPR2  ACE-CPR3  ACE-CPR4  ACE-CPR5  ACE-CPR6  ACE-CPR7  ACE-CPR8 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-CPR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; DIAL CAPABILITY RULES ;;;

    (defrule MANIFEST::DIAL-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&DIAL) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::DIAL-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::DIAL-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&DIAL) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "CO2 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL0) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "CH4 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL1) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "CO2 flux") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL2) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol extinction coefficient") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL3) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "pCO2") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL4) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "O3 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL5) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea-ice thickness") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL6) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by DIAL) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id DIAL7) (Instrument DIAL) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  DIAL0  DIAL1  DIAL2  DIAL3  DIAL4  DIAL5  DIAL6  DIAL7  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  DIAL0  DIAL1  DIAL2  DIAL3  DIAL4  DIAL5  DIAL6  DIAL7 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::DIAL-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; CALIPSO-CALIOP CAPABILITY RULES ;;;

    (defrule MANIFEST::CALIPSO-CALIOP-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CALIPSO-CALIOP) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::CALIPSO-CALIOP-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::CALIPSO-CALIOP-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CALIPSO-CALIOP) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP0) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud drop effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP1) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol volcanic ash") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP2) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Height of the tropopause") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP3) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP4) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol mass mixing ratio") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP5) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud liquid water") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP6) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP7) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol species mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP8) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP9) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP10) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP11) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP12) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Height of the top of PBL") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-CALIOP) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-CALIOP13) (Instrument CALIPSO-CALIOP) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  CALIPSO-CALIOP0  CALIPSO-CALIOP1  CALIPSO-CALIOP2  CALIPSO-CALIOP3  CALIPSO-CALIOP4  CALIPSO-CALIOP5  CALIPSO-CALIOP6  CALIPSO-CALIOP7  CALIPSO-CALIOP8  CALIPSO-CALIOP9  CALIPSO-CALIOP10  CALIPSO-CALIOP11  CALIPSO-CALIOP12  CALIPSO-CALIOP13  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  CALIPSO-CALIOP0  CALIPSO-CALIOP1  CALIPSO-CALIOP2  CALIPSO-CALIOP3  CALIPSO-CALIOP4  CALIPSO-CALIOP5  CALIPSO-CALIOP6  CALIPSO-CALIOP7  CALIPSO-CALIOP8  CALIPSO-CALIOP9  CALIPSO-CALIOP10  CALIPSO-CALIOP11  CALIPSO-CALIOP12  CALIPSO-CALIOP13 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-CALIOP-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; CALIPSO-WFC CAPABILITY RULES ;;;

    (defrule MANIFEST::CALIPSO-WFC-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CALIPSO-WFC) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::CALIPSO-WFC-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::CALIPSO-WFC-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CALIPSO-WFC) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-WFC) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-WFC0) (Instrument CALIPSO-WFC) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea-ice cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-WFC) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-WFC1) (Instrument CALIPSO-WFC) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Snow cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-WFC) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-WFC2) (Instrument CALIPSO-WFC) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Glacier cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-WFC) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-WFC3) (Instrument CALIPSO-WFC) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  CALIPSO-WFC0  CALIPSO-WFC1  CALIPSO-WFC2  CALIPSO-WFC3  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  CALIPSO-WFC0  CALIPSO-WFC1  CALIPSO-WFC2  CALIPSO-WFC3 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-WFC-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; IR-Spectrometer CAPABILITY RULES ;;;

    (defrule MANIFEST::IR-Spectrometer-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&IR-Spectrometer) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::IR-Spectrometer-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::IR-Spectrometer-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&IR-Spectrometer) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "CO2 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer0) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer1) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Upward long-wave irradiance at Earth surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer2) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer3) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "NO2 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer4) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Upward long-wave irradiance at TOA") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer5) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "CO2 flux") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer6) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "pCO2") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer7) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Specific humidity") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High) (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer8) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea surface temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer9) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Land surface temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer10) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Downward long-wave irradiance at Earth surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer11) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "CH4 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer12) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer13) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Atmospheric temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer14) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "O3 mole fraction") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer15) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Height of the top of PBL") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by IR-Spectrometer) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id IR-Spectrometer16) (Instrument IR-Spectrometer) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  IR-Spectrometer0  IR-Spectrometer1  IR-Spectrometer2  IR-Spectrometer3  IR-Spectrometer4  IR-Spectrometer5  IR-Spectrometer6  IR-Spectrometer7  IR-Spectrometer8  IR-Spectrometer9  IR-Spectrometer10  IR-Spectrometer11  IR-Spectrometer12  IR-Spectrometer13  IR-Spectrometer14  IR-Spectrometer15  IR-Spectrometer16  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  IR-Spectrometer0  IR-Spectrometer1  IR-Spectrometer2  IR-Spectrometer3  IR-Spectrometer4  IR-Spectrometer5  IR-Spectrometer6  IR-Spectrometer7  IR-Spectrometer8  IR-Spectrometer9  IR-Spectrometer10  IR-Spectrometer11  IR-Spectrometer12  IR-Spectrometer13  IR-Spectrometer14  IR-Spectrometer15  IR-Spectrometer16 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::IR-Spectrometer-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; ACE-LID CAPABILITY RULES ;;;

    (defrule MANIFEST::ACE-LID-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-LID) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::ACE-LID-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::ACE-LID-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&ACE-LID) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID0) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID1) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID2) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID3) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud drop effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID4) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol volcanic ash") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID5) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID6) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol mass mixing ratio") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID7) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID8) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud liquid water") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID9) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID10) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Height of the top of PBL") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Low-3days-1-week) (Accuracy High)  (taken-by ACE-LID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id ACE-LID11) (Instrument ACE-LID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  ACE-LID0  ACE-LID1  ACE-LID2  ACE-LID3  ACE-LID4  ACE-LID5  ACE-LID6  ACE-LID7  ACE-LID8  ACE-LID9  ACE-LID10  ACE-LID11  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  ACE-LID0  ACE-LID1  ACE-LID2  ACE-LID3  ACE-LID4  ACE-LID5  ACE-LID6  ACE-LID7  ACE-LID8  ACE-LID9  ACE-LID10  ACE-LID11 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::ACE-LID-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; EARTHCARE-ATLID CAPABILITY RULES ;;;

    (defrule MANIFEST::EARTHCARE-ATLID-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-ATLID) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::EARTHCARE-ATLID-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::EARTHCARE-ATLID-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-ATLID) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution High-10-100m) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID0) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Highest-1m-orless) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID1) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud ice") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Highest-1m-orless) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID2) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol effective radius") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Highest-1m-orless) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID3) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol volcanic ash") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Highest-1m-orless) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID4) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol optical depth") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Highest-1m-orless) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID5) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Aerosol type") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Highest-1m-orless) (Vertical-Spatial-Resolution High-200m-orless) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-ATLID) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-ATLID6) (Instrument EARTHCARE-ATLID) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  EARTHCARE-ATLID0  EARTHCARE-ATLID1  EARTHCARE-ATLID2  EARTHCARE-ATLID3  EARTHCARE-ATLID4  EARTHCARE-ATLID5  EARTHCARE-ATLID6  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  EARTHCARE-ATLID0  EARTHCARE-ATLID1  EARTHCARE-ATLID2  EARTHCARE-ATLID3  EARTHCARE-ATLID4  EARTHCARE-ATLID5  EARTHCARE-ATLID6 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-ATLID-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; EARTHCARE-BBR CAPABILITY RULES ;;;

    (defrule MANIFEST::EARTHCARE-BBR-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-BBR) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::EARTHCARE-BBR-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::EARTHCARE-BBR-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&EARTHCARE-BBR) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-BBR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Upward short-wave irradiance at TOA") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-BBR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-BBR0) (Instrument EARTHCARE-BBR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-BBR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Upward long-wave irradiance at TOA") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by EARTHCARE-BBR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id EARTHCARE-BBR1) (Instrument EARTHCARE-BBR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-BBR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  EARTHCARE-BBR0  EARTHCARE-BBR1  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-BBR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  EARTHCARE-BBR0  EARTHCARE-BBR1 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-BBR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::EARTHCARE-BBR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; AQUARIUS CAPABILITY RULES ;;;

    (defrule MANIFEST::AQUARIUS-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&AQUARIUS) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::AQUARIUS-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::AQUARIUS-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&AQUARIUS) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea surface salinity") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by AQUARIUS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id AQUARIUS0) (Instrument AQUARIUS) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Soil moisture (in the roots region)") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by AQUARIUS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id AQUARIUS1) (Instrument AQUARIUS) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Soil moisture at surface") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Very-low-10-100km) (Accuracy High)  (taken-by AQUARIUS) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id AQUARIUS2) (Instrument AQUARIUS) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  AQUARIUS0  AQUARIUS1  AQUARIUS2  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  AQUARIUS0  AQUARIUS1  AQUARIUS2 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::AQUARIUS-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )


    ;;; CALIPSO-IIR CAPABILITY RULES ;;;

    (defrule MANIFEST::CALIPSO-IIR-init-can-measure
        (declare (salience -20))
        ?this <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CALIPSO-IIR) (Id ?id) (flies-in ?miss) (Intent ?int) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh))
        (not (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?miss) (can-take-measurements no))) ; CONDITION ;
        =>
        (assert (CAPABILITIES::can-measure (instrument ?ins) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (data-rate-duty-cycle# nil) (power-duty-cycle# nil)(orbit-RAAN ?raan) (in-orbit (eval (str-cat ?typ "-" ?h "-" ?inc "-" ?raan))) (can-take-measurements yes) (reason "by default") (copied-to-measurement-fact no)(factHistory (str-cat "{R" (?*rulesMap* get MANIFEST::CALIPSO-IIR-init-can-measure) " A" (call ?this getFactId) "}"))))
    )


    (defrule CAPABILITIES-GENERATE::CALIPSO-IIR-measurements
        ?this  <- (CAPABILITIES::Manifested-instrument  (Name ?ins&CALIPSO-IIR) (Id ?id) (flies-in ?miss) (Intent ?int) (orbit-string ?orb) (Spectral-region ?sr) (orbit-type ?typ) (orbit-altitude# ?h) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Illumination ?il) (factHistory ?fh1))
        ?this2 <- (CAPABILITIES::can-measure (instrument ?ins) (in-orbit ?orb) (can-take-measurements yes) (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (copied-to-measurement-fact no)(factHistory ?fh2))
        =>
        (if (and (numberp ?dc-d) (numberp ?dc-p)) then (bind ?*science-multiplier* (min ?dc-d ?dc-p)) else (bind ?*science-multiplier* 1.0))
        (assert (CAPABILITIES::resource-limitations (data-rate-duty-cycle# ?dc-d) (power-duty-cycle# ?dc-p) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud cover") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-IIR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-IIR0) (Instrument CALIPSO-IIR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top height") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-IIR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-IIR1) (Instrument CALIPSO-IIR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Cloud top temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-IIR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-IIR2) (Instrument CALIPSO-IIR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Wind (horizontal)") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-IIR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-IIR3) (Instrument CALIPSO-IIR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Sea surface temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-IIR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-IIR4) (Instrument CALIPSO-IIR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (REQUIREMENTS::Measurement (Parameter "Land surface temperature") (Region-of-interest Global) (Coverage-of-region-of-interest Global) (Horizontal-Spatial-Resolution Medium-100m-1km) (Temporal-resolution Very-low-1-3-weeks) (Accuracy High)  (taken-by CALIPSO-IIR) (flies-in ?miss) (orbit-altitude# ?h) (orbit-RAAN ?raan) (orbit-anomaly# ?ano) (Id CALIPSO-IIR5) (Instrument CALIPSO-IIR) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (assert (SYNERGIES::cross-registered (measurements  CALIPSO-IIR0  CALIPSO-IIR1  CALIPSO-IIR2  CALIPSO-IIR3  CALIPSO-IIR4  CALIPSO-IIR5  ) (degree-of-cross-registration instrument) (platform ?id  ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " A" (call ?this getFactId) " A" (call ?this2 getFactId) "}"))))
        (modify ?this (measurement-ids  CALIPSO-IIR0  CALIPSO-IIR1  CALIPSO-IIR2  CALIPSO-IIR3  CALIPSO-IIR4  CALIPSO-IIR5 ) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
        (modify ?this2 (copied-to-measurement-fact yes) (factHistory (str-cat "{R" (?*rulesMap* get CAPABILITIES::CALIPSO-IIR-measurements) " " ?fh1 " S" (call ?this2 getFactId) "}")))
    )

