/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package evaluator;

import jess.Userfunction;
import seakers.orekit.util.OrekitConfig;
import vassar.GlobalScope;
import vassar.VassarClient;
import vassar.database.DatabaseClient;
import vassar.database.service.DebugAPI;
import vassar.database.service.QueryAPI;
import vassar.jess.Resource;
import vassar.jess.Requests;
import vassar.jess.func.Improve;
import vassar.jess.func.SameOrBetter;
import vassar.jess.func.Worsen;
import sqs.Consumer;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;


import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;

public class EvaluatorApp {

    public static void main(String[] args) {

//  _____ _   _ _____ _______
// |_   _| \ | |_   _|__   __|
//   | | |  \| | | |    | |
//   | | | . ` | | |    | |
//  _| |_| |\  |_| |_   | |
// |_____|_| \_|_____|  |_|
//

        String coverage_database = "/app/src/main/java/vassar/evaluator/coverage/orekit/CoverageDatabase";
        String orekit_init       = "/app/src/main/java/vassar/evaluator/coverage/orekit";

        System.setProperty("orekit.coveragedatabase", coverage_database);
        OrekitConfig.init(1, orekit_init);

        GlobalScope.measurementsToSubobjectives = new HashMap<>();
        GlobalScope.subobjectivesToMeasurements = new HashMap<>();

        // String rootPath = "/Users/gabeapaza/repositories/seakers/design_evaluator";
        String rootPath = ""; // DOCKER


        String outputFilePath     = rootPath + "/app/debug/dbOutput.json";
        String outputPath         = rootPath + "/app/debug";
        String apollo_url         = System.getenv("APOLLO_URL");
        String localstackEndpoint = System.getenv("AWS_STACK_ENDPOINT");
        String queue_url          = System.getenv("EVAL_QUEUE_URL");
        boolean debug             = true;

        int group_id   = Integer.parseInt(System.getenv("GROUP_ID"));
        int problem_id = Integer.parseInt(System.getenv("PROBLEM_ID"));


        ArrayList<Userfunction> userFuncs = new ArrayList<>() {{
            add( new SameOrBetter() );
            add( new Improve() );
            add( new Worsen() );
        }};


        // -----> JESS REQUESTS <-----
        String jessGlobalTempPath = rootPath + "/app/src/main/java/vassar/database/template/defs";
        String jessGlobalFuncPath = rootPath + "/app/src/main/java/vassar/jess/utils/clp";
        String jessAppPath        = rootPath + "/app/problems/smap/clp";
        String requestMode        = System.getenv("REQUEST_MODE");
        Requests requests = new Requests.Builder()
                                        .setGlobalTemplatePath(jessGlobalTempPath)
                                        .setGlobalFunctionPath(jessGlobalFuncPath)
                                        .setFunctionTemplates()
                                        .setRequestMode(requestMode)
                                        .setJessAppPath(jessAppPath)
                                        .build();



        System.out.println("\n------------------ VASSAR INIT ------------------");
        System.out.println("----------> APOLLO URL: " + apollo_url);
        System.out.println("----> AWS ENDPOINT URL: " + localstackEndpoint);
        System.out.println("-----> INPUT QUEUE URL: " + queue_url);
        System.out.println("---------------> GROUP: " + group_id);
        System.out.println("-------------> PROBLEM: " + problem_id);
        System.out.println("--------> REQUEST MODE: " + requestMode);
        System.out.println("-------------------------------------------------------\n");





//  _           _ _     _
// | |         (_) |   | |
// | |__  _   _ _| | __| |
// | '_ \| | | | | |/ _` |
// | |_) | |_| | | | (_| |
// |_.__/ \__,_|_|_|\__,_|
//


        QueryAPI queryAPI = new QueryAPI.Builder(apollo_url)
                                        .groupID(group_id)
                                        .problemID(problem_id)
                                        .build();

        DebugAPI debugAPI = new DebugAPI.Builder(outputFilePath)
                                        .newFile()
                                        .setOutputPath(outputPath)
                                        .build();

        DatabaseClient dbClient = new DatabaseClient.Builder()
                                        .debug(debug)
                                        .queryClient(queryAPI)
                                        .debugClient(debugAPI)
                                        .build();



        Resource engine = new Resource.Builder(dbClient)
                                        .addUserFunctionBatch(userFuncs)      // - Improve(), SameOrBetter(), Worsen()
                                        .setRequests(requests.getRequests()) // - eval: template requests (+ functions)
                                        .setRequestMode(requestMode)
                                        .build();



        VassarClient vClient = new VassarClient.Builder()
                                        .setEngine(engine)
                                        .build();







        SqsClient sqsClient = SqsClient.builder()
                                        .region(Region.US_EAST_2)
                                        .endpointOverride(URI.create(localstackEndpoint))
                                        .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
                                        .build();




        Consumer evaluator = new Consumer.Builder(sqsClient)
                                         .setVassarClient(vClient)
                                         .setQueueUrl(queue_url)
                                         .debug(debug)
                                         .build();

        // RUN CONSUMER
        Thread cThread = new Thread(evaluator);
        cThread.start();

    }
}
